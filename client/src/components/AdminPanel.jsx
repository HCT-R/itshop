import React, { useState, useEffect } from "react";
import axios from "axios";

export default function AdminPanel() {
  const [products, setProducts] = useState([]);
  const [form, setForm] = useState({
    name: "",
    description: "",
    price: "",
    image: "",
    brand: "",
    category: "",
    stock: "",
    specs: {
      os: "",
      cpu: "",
      cpuModel: "",
      cpuFrequency: "",
      igpu: "",
      gpu: "",
      ram: "",
      ramConfig: "",
      ramSlots: "",
      storage: "",
      screen: "",
      ratio: "",
      pixelSize: ""
    }
  });
  const [editId, setEditId] = useState(null);
  const [existingCategories, setExistingCategories] = useState([]);
  const [customCategory, setCustomCategory] = useState("");
  const [error, setError] = useState("");

  const defaultSpecs = {
    os: "",
    cpu: "",
    cpuModel: "",
    cpuFrequency: "",
    igpu: "",
    gpu: "",
    ram: "",
    ramConfig: "",
    ramSlots: "",
    storage: "",
    screen: "",
    ratio: "",
    pixelSize: ""
  };

  useEffect(() => {
    fetchProducts();
  }, []);

  const fetchProducts = async () => {
    try {
      const res = await axios.get("http://localhost:3001/api/products");
      setProducts(res.data);
      // –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –∏—Ö
      const categories = [...new Set(res.data.map(p => p.category).filter(Boolean))].sort();
      setExistingCategories(categories);
    } catch (err) {
      setError("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–æ–≤–∞—Ä–æ–≤");
      console.error(err);
    }
  };

  const handleDelete = async (id) => {
    try {
      await axios.delete(`http://localhost:3001/api/products/${id}`);
      await fetchProducts();
    } catch (err) {
      setError("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞");
      console.error(err);
    }
  };

  const handleEdit = (product) => {
    setForm({
      ...product,
      price: product.price?.toString() || "",
      stock: product.stock?.toString() || "",
      specs: { ...defaultSpecs, ...product.specs }
    });
    setEditId(product._id);
    setCustomCategory("");
    setError("");
  };

  const handleChangeSpecs = (key, value) => {
    setForm({ ...form, specs: { ...form.specs, [key]: value } });
  };

  const validateForm = () => {
    if (!form.name.trim()) return "–ù–∞–∑–≤–∞–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ";
    if (!form.price.trim()) return "–¶–µ–Ω–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞";
    if (isNaN(form.price) || Number(form.price) <= 0) return "–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º";
    if (!form.category && !customCategory.trim()) return "–ö–∞—Ç–µ–≥–æ—Ä–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞";
    return "";
  };

  const handleSubmit = async () => {
    const validationError = validateForm();
    if (validationError) {
      setError(validationError);
      return;
    }

    try {
      const finalForm = {
        ...form,
        price: Number(form.price),
        stock: form.stock ? Number(form.stock) : 0,
        category: form.category === "custom" ? customCategory.trim() : form.category,
        specs: { ...form.specs }
      };

      if (editId) {
        await axios.put(`http://localhost:3001/api/products/${editId}`, finalForm);
      } else {
        await axios.post("http://localhost:3001/api/products", finalForm);
      }
      
      resetForm();
      await fetchProducts();
    } catch (err) {
      setError(err.response?.data?.message || "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞");
      console.error(err);
    }
  };

  const resetForm = () => {
    setEditId(null);
    setForm({ name: "", description: "", price: "", image: "", brand: "", category: "", stock: "", specs: { ...defaultSpecs } });
    setCustomCategory("");
    setError("");
  };

  return (
    <div className="p-4">
      <h2 className="text-xl font-bold mb-2">–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</h2>

      {error && (
        <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4">
          {error}
        </div>
      )}

      <div className="space-y-2 mb-4">
        <input 
          className="border p-1 w-full" 
          placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ" 
          value={form.name} 
          onChange={(e) => setForm({ ...form, name: e.target.value })} 
        />
        <input 
          className="border p-1 w-full" 
          placeholder="–û–ø–∏—Å–∞–Ω–∏–µ" 
          value={form.description} 
          onChange={(e) => setForm({ ...form, description: e.target.value })} 
        />
        <input 
          className="border p-1 w-full" 
          placeholder="–¶–µ–Ω–∞" 
          type="number" 
          value={form.price} 
          onChange={(e) => setForm({ ...form, price: e.target.value })} 
        />
        <input 
          className="border p-1 w-full" 
          placeholder="–°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫—É" 
          value={form.image} 
          onChange={(e) => setForm({ ...form, image: e.target.value })} 
        />
        <input 
          className="border p-1 w-full" 
          placeholder="–ë—Ä–µ–Ω–¥" 
          value={form.brand} 
          onChange={(e) => setForm({ ...form, brand: e.target.value })} 
        />
        <input
          className="border p-1 w-full"
          placeholder="–ù–∞–ª–∏—á–∏–µ (—à—Ç.)"
          type="number"
          value={form.stock}
          onChange={e => setForm({ ...form, stock: e.target.value })}
        />
        <div className="grid grid-cols-1 md:grid-cols-2 gap-2">
          <input className="border p-1 w-full" placeholder="–¢–∏–ø –º–∞—Ç—Ä–∏—Ü—ã (os)" value={form.specs.os} onChange={e => handleChangeSpecs('os', e.target.value)} />
          <input className="border p-1 w-full" placeholder="–î–∏–∞–≥–æ–Ω–∞–ª—å —ç–∫—Ä–∞–Ω–∞, –¥—é–π–º (screen)" value={form.specs.screen} onChange={e => handleChangeSpecs('screen', e.target.value)} />
          <input className="border p-1 w-full" placeholder="–°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω (ratio)" value={form.specs.ratio} onChange={e => handleChangeSpecs('ratio', e.target.value)} />
          <input className="border p-1 w-full" placeholder="–†–∞–∑–º–µ—Ä –ø–∏–∫—Å–µ–ª—è, –º–º (pixelSize)" value={form.specs.pixelSize} onChange={e => handleChangeSpecs('pixelSize', e.target.value)} />
          <input className="border p-1 w-full" placeholder="CPU" value={form.specs.cpu} onChange={e => handleChangeSpecs('cpu', e.target.value)} />
          <input className="border p-1 w-full" placeholder="–ú–æ–¥–µ–ª—å CPU" value={form.specs.cpuModel} onChange={e => handleChangeSpecs('cpuModel', e.target.value)} />
          <input className="border p-1 w-full" placeholder="–ß–∞—Å—Ç–æ—Ç–∞ CPU" value={form.specs.cpuFrequency} onChange={e => handleChangeSpecs('cpuFrequency', e.target.value)} />
          <input className="border p-1 w-full" placeholder="iGPU" value={form.specs.igpu} onChange={e => handleChangeSpecs('igpu', e.target.value)} />
          <input className="border p-1 w-full" placeholder="GPU" value={form.specs.gpu} onChange={e => handleChangeSpecs('gpu', e.target.value)} />
          <input className="border p-1 w-full" placeholder="RAM" value={form.specs.ram} onChange={e => handleChangeSpecs('ram', e.target.value)} />
          <input className="border p-1 w-full" placeholder="–ö–æ–Ω—Ñ–∏–≥ RAM" value={form.specs.ramConfig} onChange={e => handleChangeSpecs('ramConfig', e.target.value)} />
          <input className="border p-1 w-full" placeholder="–°–ª–æ—Ç—ã RAM" value={form.specs.ramSlots} onChange={e => handleChangeSpecs('ramSlots', e.target.value)} />
          <input className="border p-1 w-full" placeholder="–•—Ä–∞–Ω–∏–ª–∏—â–µ (storage)" value={form.specs.storage} onChange={e => handleChangeSpecs('storage', e.target.value)} />
        </div>

        <select
          className="border p-1 w-full"
          value={form.category}
          onChange={(e) => {
            setForm({ ...form, category: e.target.value });
            setError("");
          }}
        >
          <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é</option>
          {existingCategories.map((cat) => (
            <option key={cat} value={cat}>{cat}</option>
          ))}
          <option value="custom">üìù –í–≤–µ—Å—Ç–∏ —Å–≤–æ—é</option>
        </select>

        {form.category === "custom" && (
          <input
            className="border p-1 w-full mt-2"
            placeholder="–ù–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è"
            value={customCategory}
            onChange={(e) => {
              setCustomCategory(e.target.value);
              setError("");
            }}
          />
        )}

        <div className="flex gap-2">
          <button
            className="bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700"
            onClick={handleSubmit}
          >
            {editId ? "–û–±–Ω–æ–≤–∏—Ç—å —Ç–æ–≤–∞—Ä" : "–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä"}
          </button>
          {editId && (
            <button
              className="bg-gray-500 text-white px-4 py-2 rounded hover:bg-gray-600"
              onClick={resetForm}
            >
              –û—Ç–º–µ–Ω–∞
            </button>
          )}
        </div>
      </div>

      <ul className="space-y-2">
        {products.map((product) => (
          <li key={product._id} className="border p-2 rounded flex justify-between items-center">
            <div>
              <div className="font-bold">{product.name}</div>
              <div className="text-sm">{product.description}</div>
              <div className="text-sm text-gray-500">–ë—Ä–µ–Ω–¥: {product.brand}</div>
              <div className="text-sm text-gray-500">–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {product.category}</div>
              <div className="text-sm text-green-600">{product.price} ‚Ç∏</div>
            </div>
            <div className="flex gap-2">
              <button 
                className="text-blue-600 font-bold hover:text-blue-800" 
                onClick={() => handleEdit(product)}
              >
                –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
              </button>
              <button 
                className="text-red-600 font-bold hover:text-red-800" 
                onClick={() => handleDelete(product._id)}
              >
                –£–¥–∞–ª–∏—Ç—å
              </button>
            </div>
          </li>
        ))}
      </ul>
    </div>
  );
}
